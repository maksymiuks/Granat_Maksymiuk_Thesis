geom_histogram(bins = 15, color = "#371ea3", fill = "#8bdcbe") +
theme_bw() +
theme_drwhy()
ggplot(data = phones, aes(x = back_camera_mpix)) +
geom_histogram(bins = 30, color = "#371ea3", fill = "#8bdcbe") +
theme_bw() +
theme_drwhy()
ggplot(data = phones, aes(x = back_camera_mpix)) +
geom_histogram(bins = 10, color = "#371ea3", fill = "#8bdcbe") +
theme_bw() +
theme_drwhy()
ggplot(data = phones, aes(x = front_camera_mpix)) +
geom_histogram(bins = 10, color = "#371ea3", fill = "#8bdcbe") +
theme_bw() +
theme_drwhy()
ggplot(data = phones, aes(x = battery_mAh)) +
geom_histogram(bins = 10, color = "#371ea3", fill = "#8bdcbe") +
theme_bw() +
theme_drwhy()
ggplot(data = phones, aes(x = price )) +
geom_histogram(bins = 10, color = "#371ea3", fill = "#8bdcbe") +
theme_bw() +
theme_drwhy()
back_camera <- ggplot(data = phones, aes(x = back_camera_mpix)) +
geom_histogram(bins = 10, color = "#371ea3", fill = "#8bdcbe") +
theme_bw() +
theme_drwhy()
front_camera <- ggplot(data = phones, aes(x = front_camera_mpix)) +
geom_histogram(bins = 10, color = "#371ea3", fill = "#8bdcbe") +
theme_bw() +
theme_drwhy()
battery_mAh <- ggplot(data = phones, aes(x = battery_mAh)) +
geom_histogram(bins = 10, color = "#371ea3", fill = "#8bdcbe") +
theme_bw() +
theme_drwhy()
ram_gb <- ggplot(data = phones, aes(x = ram_gb)) +
geom_histogram(bins = 10, color = "#371ea3", fill = "#8bdcbe") +
theme_bw() +
theme_drwhy()
flash_gb <- ggplot(data = phones, aes(x = flash_gb)) +
geom_histogram(bins = 10, color = "#371ea3", fill = "#8bdcbe") +
theme_bw() +
theme_drwhy()
diag <- ggplot(data = phones, aes(x = diag)) +
geom_histogram(bins = 10, color = "#371ea3", fill = "#8bdcbe") +
theme_bw() +
theme_drwhy()
resolution_Mpx <- ggplot(data = phones, aes(x = resolution_Mpx)) +
geom_histogram(bins = 10, color = "#371ea3", fill = "#8bdcbe") +
theme_bw() +
theme_drwhy()
price  <- ggplot(data = phones, aes(x = price )) +
geom_histogram(bins = 10, color = "#371ea3", fill = "#8bdcbe") +
theme_bw() +
theme_drwhy()
ggplot(data = phones, aes(x = price )) +
geom_histogram(bins = 10, color = "#371ea3", fill = "#8bdcbe") +
theme_bw() +
labs(subtitle = "dadad") +
theme_drwhy()
ggplot(data = phones, aes(x = price )) +
geom_histogram(bins = 10, color = "#371ea3", fill = "#8bdcbe") +
theme_bw() +
labs(subtitle = "Histogram for price variable") +
theme_drwhy()
back_camera <- ggplot(data = phones, aes(x = back_camera_mpix)) +
geom_histogram(bins = 10, color = "#371ea3", fill = "#8bdcbe") +
labs(subtitle = "Histogram for back_camera_mpix variable") +
theme_bw() +
theme_drwhy()
front_camera <- ggplot(data = phones, aes(x = front_camera_mpix)) +
geom_histogram(bins = 10, color = "#371ea3", fill = "#8bdcbe") +
labs(subtitle = "Histogram for front_camera_mpix variable") +
theme_bw() +
theme_drwhy()
battery_mAh <- ggplot(data = phones, aes(x = battery_mAh)) +
geom_histogram(bins = 10, color = "#371ea3", fill = "#8bdcbe") +
labs(subtitle = "Histogram for battery_mAh variable") +
theme_bw() +
theme_drwhy()
ram_gb <- ggplot(data = phones, aes(x = ram_gb)) +
geom_histogram(bins = 10, color = "#371ea3", fill = "#8bdcbe") +
labs(subtitle = "Histogram for ram_gb variable") +
theme_bw() +
theme_drwhy()
flash_gb <- ggplot(data = phones, aes(x = flash_gb)) +
geom_histogram(bins = 10, color = "#371ea3", fill = "#8bdcbe") +
labs(subtitle = "Histogram for flash_gb variable") +
theme_bw() +
theme_drwhy()
diag <- ggplot(data = phones, aes(x = diag)) +
geom_histogram(bins = 10, color = "#371ea3", fill = "#8bdcbe") +
labs(subtitle = "Histogram for diag variable") +
theme_bw() +
theme_drwhy()
resolution_Mpx <- ggplot(data = phones, aes(x = resolution_Mpx)) +
geom_histogram(bins = 10, color = "#371ea3", fill = "#8bdcbe") +
labs(subtitle = "Histogram for resolution_Mpx variable") +
theme_bw() +
theme_drwhy()
price  <- ggplot(data = phones, aes(x = price )) +
geom_histogram(bins = 10, color = "#371ea3", fill = "#8bdcbe") +
theme_bw() +
labs(subtitle = "Histogram for price variable") +
theme_drwhy()
ggplot(data = phones, aes(x = brand)) +
geom_histogram(bins = 10, color = "#371ea3", fill = "#8bdcbe", stat = "count") +
labs(subtitle = "Histogram for back_camera_mpix variable") +
theme_bw() +
theme_drwhy()
forcats::fct_lump(phones$brand, 10)
forcats::fct_lump(phones$brand, 9)
bar_plot_data <- forcats::fct_lump(phones$brand, 9)
ggplot(aes(x = bar_plot_data)) +
geom_histogram(color = "#371ea3", fill = "#8bdcbe", stat = "count") +
labs(subtitle = "Histogram for back_camera_mpix variable") +
theme_bw() +
theme_drwhy()
dbar_plot_data <- data.frame(brand = forcats::fct_lump(phones$brand, 9))
ggplot(dbar_plot_data, aes(x = brand)) +
geom_histogram(color = "#371ea3", fill = "#8bdcbe", stat = "count") +
labs(subtitle = "Histogram for back_camera_mpix variable") +
theme_bw() +
theme_drwhy()
brand <- ggplot(dbar_plot_data, aes(x = brand)) +
geom_histogram(color = "#371ea3", fill = "#8bdcbe", stat = "count") +
labs(subtitle = "Bar plot for brand variable") +
theme_bw() +
theme_drwhy()
gridExtra::grid.arrange(brand, back_camera, front_camera, battery_mAh, ram_gb, flash_gb, flash_gb,
diag, resolution_Mpx, price, ncol = 2)
data_vis <- gridExtra::grid.arrange(brand, back_camera, front_camera, battery_mAh, ram_gb, flash_gb, flash_gb,
diag, resolution_Mpx, price, ncol = 2)
ggsave("../plots/data_vist.png", plot = data_vis, height = 20, width = 10)
ggsave("../plots/data_vist.png", plot = data_vis, height = 10, width = 50)
ggsave("../plots/data_vist.png", plot = data_vis, height = 10, width = 50)
ggsave("../plots/data_vist.png", plot = data_vis, height = 10, width = 50\)
ggsave("../plots/data_vist.png", plot = data_vis, height = 10, width = 5)
ggplot(dbar_plot_data, aes(x = brand)) +
geom_histogram(color = "#371ea3", fill = "#8bdcbe", stat = "count") +
labs(subtitle = "Bar plot for brand variable") +
theme_bw() +
theme_drwhy() +
theme(axis.text.x=element_text(angle=45, hjust=1))
ggplot(dbar_plot_data, aes(x = brand)) +
geom_histogram(color = "#371ea3", fill = "#8bdcbe", stat = "count") +
labs(subtitle = "Bar plot for brand variable") +
theme_bw() +
theme_drwhy() +
theme(axis.text.x=element_text(angle=90, hjust=1))
ggplot(dbar_plot_data, aes(x = brand)) +
geom_histogram(color = "#371ea3", fill = "#8bdcbe", stat = "count") +
labs(subtitle = "Bar plot for brand variable") +
theme_bw() +
theme_drwhy() +
theme(axis.text.x=element_text(angle=60, hjust=1))
brand <- ggplot(dbar_plot_data, aes(x = brand)) +
geom_histogram(color = "#371ea3", fill = "#8bdcbe", stat = "count") +
labs(subtitle = "Bar plot for brand variable") +
theme_bw() +
theme_drwhy() +
theme(axis.text.x=element_text(angle=60, hjust=1))
data_vis <- gridExtra::grid.arrange(brand, back_camera, front_camera, battery_mAh, ram_gb, flash_gb, flash_gb,
diag, resolution_Mpx, price, ncol = 2)
ggsave("../plots/data_vist.png", plot = data_vis, height = 10, width = 50)
data_vis <- gridExtra::grid.arrange(brand, back_camera, front_camera, battery_mAh, ram_gb, flash_gb, flash_gb,
diag, resolution_Mpx, price, ncol = 2)
ggsave("../plots/data_vist.png", plot = data_vis, height = 10, width = 5)
ggsave("../plots/data_vist.png", plot = data_vis, height = 15, width = 8)
ggsave("../plots/data_vist.png", plot = data_vis, height = 12, width = 6)
data_vis <- gridExtra::grid.arrange(back_camera, brand, front_camera, battery_mAh, ram_gb, flash_gb, flash_gb,
diag, resolution_Mpx, price, ncol = 2)
ggsave("../plots/data_vist.png", plot = data_vis, height = 12, width = 6)
brand <- ggplot(dbar_plot_data, aes(x = brand)) +
geom_histogram(color = "#371ea3", fill = "#8bdcbe", stat = "count") +
labs(subtitle = "Bar plot for brand variable") +
scale_y_continuous(limits = c(0, 210)) +
theme_bw() +
theme_drwhy() +
theme(axis.text.x=element_text(angle=60, hjust=1))
back_camera <- ggplot(data = phones, aes(x = back_camera_mpix)) +
geom_histogram(bins = 10, color = "#371ea3", fill = "#8bdcbe") +
labs(subtitle = "Histogram for back_camera_mpix variable") +
scale_y_continuous(limits = c(0, 210)) +
theme_bw() +
theme_drwhy()
front_camera <- ggplot(data = phones, aes(x = front_camera_mpix)) +
geom_histogram(bins = 10, color = "#371ea3", fill = "#8bdcbe") +
labs(subtitle = "Histogram for front_camera_mpix variable") +
scale_y_continuous(limits = c(0, 210)) +
theme_bw() +
theme_drwhy()
battery_mAh <- ggplot(data = phones, aes(x = battery_mAh)) +
geom_histogram(bins = 10, color = "#371ea3", fill = "#8bdcbe") +
labs(subtitle = "Histogram for battery_mAh variable") +
scale_y_continuous(limits = c(0, 210)) +
theme_bw() +
theme_drwhy()
ram_gb <- ggplot(data = phones, aes(x = ram_gb)) +
geom_histogram(bins = 10, color = "#371ea3", fill = "#8bdcbe") +
labs(subtitle = "Histogram for ram_gb variable") +
scale_y_continuous(limits = c(0, 210)) +
theme_bw() +
theme_drwhy()
flash_gb <- ggplot(data = phones, aes(x = flash_gb)) +
geom_histogram(bins = 10, color = "#371ea3", fill = "#8bdcbe") +
labs(subtitle = "Histogram for flash_gb variable") +
scale_y_continuous(limits = c(0, 210)) +
theme_bw() +
theme_drwhy()
diag <- ggplot(data = phones, aes(x = diag)) +
geom_histogram(bins = 10, color = "#371ea3", fill = "#8bdcbe") +
labs(subtitle = "Histogram for diag variable") +
scale_y_continuous(limits = c(0, 210)) +
theme_bw() +
theme_drwhy()
resolution_Mpx <- ggplot(data = phones, aes(x = resolution_Mpx)) +
geom_histogram(bins = 10, color = "#371ea3", fill = "#8bdcbe") +
labs(subtitle = "Histogram for resolution_Mpx variable") +
scale_y_continuous(limits = c(0, 210)) +
theme_bw() +
theme_drwhy()
price  <- ggplot(data = phones, aes(x = price )) +
geom_histogram(bins = 10, color = "#371ea3", fill = "#8bdcbe") +
theme_bw() +
labs(subtitle = "Histogram for price variable") +
scale_y_continuous(limits = c(0, 210)) +
theme_drwhy()
data_vis <- gridExtra::grid.arrange(back_camera, brand, front_camera, battery_mAh, ram_gb, flash_gb, flash_gb,
diag, resolution_Mpx, price, ncol = 2)
brand <- ggplot(dbar_plot_data, aes(x = brand)) +
geom_histogram(color = "#371ea3", fill = "#8bdcbe", stat = "count") +
labs(subtitle = "Bar plot for brand variable") +
scale_y_continuous(limits = c(0, 210)) +
theme_bw() +
theme_drwhy() +
theme(axis.text.x=element_text(angle=60, hjust=1))
back_camera <- ggplot(data = phones, aes(x = back_camera_mpix)) +
geom_histogram(bins = 10, color = "#371ea3", fill = "#8bdcbe") +
labs(subtitle = "Histogram for back_camera_mpix variable") +
scale_y_continuous(limits = c(0, 210)) +
theme_bw() +
theme_drwhy()
front_camera <- ggplot(data = phones, aes(x = front_camera_mpix)) +
geom_histogram(bins = 10, color = "#371ea3", fill = "#8bdcbe") +
labs(subtitle = "Histogram for front_camera_mpix variable") +
scale_y_continuous(limits = c(0, 210)) +
theme_bw() +
theme_drwhy()
battery_mAh <- ggplot(data = phones, aes(x = battery_mAh)) +
geom_histogram(bins = 10, color = "#371ea3", fill = "#8bdcbe") +
labs(subtitle = "Histogram for battery_mAh variable") +
scale_y_continuous(limits = c(0, 210)) +
theme_bw() +
theme_drwhy()
ram_gb <- ggplot(data = phones, aes(x = ram_gb)) +
geom_histogram(bins = 10, color = "#371ea3", fill = "#8bdcbe") +
labs(subtitle = "Histogram for ram_gb variable") +
scale_y_continuous(limits = c(0, 210)) +
theme_bw() +
theme_drwhy()
flash_gb <- ggplot(data = phones, aes(x = flash_gb)) +
geom_histogram(bins = 10, color = "#371ea3", fill = "#8bdcbe") +
labs(subtitle = "Histogram for flash_gb variable") +
scale_y_continuous(limits = c(0, 210)) +
theme_bw() +
theme_drwhy()
diag <- ggplot(data = phones, aes(x = diag)) +
geom_histogram(bins = 10, color = "#371ea3", fill = "#8bdcbe") +
labs(subtitle = "Histogram for diag variable") +
scale_y_continuous(limits = c(0, 210)) +
theme_bw() +
theme_drwhy()
resolution_Mpx <- ggplot(data = phones, aes(x = resolution_Mpx)) +
geom_histogram(bins = 10, color = "#371ea3", fill = "#8bdcbe") +
labs(subtitle = "Histogram for resolution_Mpx variable") +
scale_y_continuous(limits = c(0, 210)) +
theme_bw() +
theme_drwhy()
price  <- ggplot(data = phones, aes(x = price )) +
geom_histogram(bins = 10, color = "#371ea3", fill = "#8bdcbe") +
theme_bw() +
labs(subtitle = "Histogram for price variable") +
scale_y_continuous(limits = c(0, 210)) +
theme_drwhy()
data_vis <- gridExtra::grid.arrange(back_camera, brand, front_camera, battery_mAh, ram_gb, flash_gb, flash_gb,
diag, resolution_Mpx, price, ncol = 2)
ggsave("../plots/data_vist.png", plot = data_vis, height = 12, width = 6)
phones <- read.csv("../data/phones/phones.csv", stringsAsFactors = TRUE)
phones$resolution_Mpx <- phones$height_px*phones$width_px/1000000
phones <- phones[,-c(9, 10)]
xtable::xtable(phones[1:8,], digits = 2)
xtable::xtable(phones[1:8,], digits = 0)
xtable::xtable(phones[1:8,], digits = 0)
xtable::xtable(fi_table, digits = 2)
xtable::xtable(phones[1:8,], digits = 2)
devtools::install_github("https://github.com/ModelOriented/treeshap")
"%<-%"
%<-%
%>%
library(magrittr)
%>%
'%>%'
`%>%`
?model_parts
citation("iBreakDown")
library(treeshap)
phones <- read.csv("../data/phones/phones.csv", stringsAsFactors = TRUE)
phones$resolution_Mpx <- phones$height_px*phones$width_px/1000000
phones <- phones[,-c(9, 10)]
task <- makeRegrTask("phones", phones[,-c(1)], "price")
library(mlr)
lrn <- makeLearner("regr.lm")
rdesc <- makeResampleDesc("CV", iters = 5)
task <- makeRegrTask("phones", phones[,-c(1)], "price")
lrn <- makeLearner("regr.lm")
rdesc <- makeResampleDesc("CV", iters = 5)
res <- resample(lrn, task, resampling = rdesc, measures = rmse)
# lm
phones_dummy <- createDummyFeatures(phones)
# lm
phones_dummy <- createDummyFeatures(phones[,-c(1)])
task <- makeRegrTask("phones", phones[,-c(1)], "price")
# lm
phones_dummy <- createDummyFeatures(phones[,-c(1)])
task <- makeRegrTask("phones", phones_dummy, "price")
lrn <- makeLearner("regr.lm")
rdesc <- makeResampleDesc("CV", iters = 5)
res <- resample(lrn, task, resampling = rdesc, measures = rmse)
phones_dummy
dim(na.omit(phones_dummy))
# lm
phones_dummy <- is.na(phones)
is.na(phones)
phones[is.na(phones)] <- 0
phones[,-1]
task <- makeRegrTask("phones", phones[,-1], y, "price")
lrn <- makeLearner("regr.lm")
rdesc <- makeResampleDesc("CV", iters = 5)
res <- resample(lrn, task, resampling = rdesc, measures = rmse)
# lm
phones[is.na(phones)] <- 0
task <- makeRegrTask("phones", phones[,-1], y, "price")
lrn <- makeLearner("regr.lm")
rdesc <- makeResampleDesc("CV", iters = 5)
# lm
phones[is.na(phones)] <- 0
task <- makeRegrTask("phones", phones[,-1], "price")
lrn <- makeLearner("regr.lm")
rdesc <- makeResampleDesc("CV", iters = 5)
res <- resample(lrn, task, resampling = rdesc, measures = rmse)
phones <- read.csv("../data/phones/phones.csv", stringsAsFactors = TRUE)
phones$resolution_Mpx <- phones$height_px*phones$width_px/1000000
phones <- phones[,-c(9, 10)]
# lm
phones[is.na(phones)] <- 0
phones <- createDummyFeatures(phones)
phones <- read.csv("../data/phones/phones.csv", stringsAsFactors = TRUE)
phones$resolution_Mpx <- phones$height_px*phones$width_px/1000000
phones <- phones[,-c(9, 10)]
# lm
phones[is.na(phones)] <- 0
phones <- createDummyFeatures(phones[,-1])
task <- makeRegrTask("phones", phones, "price")
lrn <- makeLearner("regr.lm")
rdesc <- makeResampleDesc("CV", iters = 5)
res <- resample(lrn, task, resampling = rdesc, measures = rmse)
res <- resample(lrn, task, resampling = rdesc, measures = rmse)
res <- resample(lrn, task, resampling = rdesc, measures = rmse)
res <- resample(lrn, task, resampling = rdesc, measures = rmse)
model <- train(lrn, task)
predict(model, newdata = phones)
predict(model, newdata = phones)$data$response
sqrt(mean((predict(model, newdata = phones)$data$response - phones$price)^2))
model <- train(lrn, task)
sqrt(mean((predict(model, newdata = phones)$data$response - phones$price)^2))
model <- train(lrn, task)
sqrt(mean((predict(model, newdata = phones)$data$response - phones$price)^2))
fi_score <- readRDS("~/GitHub/InzynierkaBartekSzymon/results/fi_score.rds")
ibd_pps <- readRDS("~/GitHub/InzynierkaBartekSzymon/results/ibd_pps.rds")
ibd_ppsv <- readRDS("~/GitHub/InzynierkaBartekSzymon/results/ibd_ppsv.rds")
lime_pps <- readRDS("~/GitHub/InzynierkaBartekSzymon/results/lime_pps.rds")
shap_pps <- readRDS("~/GitHub/InzynierkaBartekSzymon/results/shap_pps.rds")
shap_ppsv <- readRDS("~/GitHub/InzynierkaBartekSzymon/results/shap_ppsv.rds")
plot_data_pps <- data.frame(Measure = ibd_pps, Price = phones$price[as.numeric(names(ibd_pps))], `Measure type` = "PPS")
plot_data_ppsv <- data.frame(Measure = ibd_ppsv, Price = phones$price[as.numeric(names(ibd_ppsv))], `Measure type` = "PPSv")
plot_data <- rbind(plot_data_pps, plot_data_ppsv)
ggplot(data = plot_data, aes(x = Price, y = Measure, color = Measure.type, fill = Measure.type)) +
geom_point() +
geom_smooth(alpha = 0.25, se = FALSE) +
labs(color = "Measure type", fill = "Measure type", x = "Phone price", y = "Measure value", title = "Break Down") +
scale_x_continuous(expand = c(0.01, 0)) +
theme_bw() +
theme(legend.position = "bottom") +
theme_drwhy()
library(ggplot2)
ggplot(data = plot_data, aes(x = Price, y = Measure, color = Measure.type, fill = Measure.type)) +
geom_point() +
geom_smooth(alpha = 0.25, se = FALSE) +
labs(color = "Measure type", fill = "Measure type", x = "Phone price", y = "Measure value", title = "Break Down") +
scale_x_continuous(expand = c(0.01, 0)) +
theme_bw() +
theme(legend.position = "bottom") +
theme_drwhy()
library(DALEX)
ggplot(data = plot_data, aes(x = Price, y = Measure, color = Measure.type, fill = Measure.type)) +
geom_point() +
geom_smooth(alpha = 0.25, se = FALSE) +
labs(color = "Measure type", fill = "Measure type", x = "Phone price", y = "Measure value", title = "Break Down") +
scale_x_continuous(expand = c(0.01, 0)) +
theme_bw() +
theme(legend.position = "bottom") +
theme_drwhy()
ibd_plot <- ggplot(data = plot_data, aes(x = Price, y = Measure, color = Measure.type, fill = Measure.type)) +
geom_point() +
geom_smooth(alpha = 0.25, se = FALSE) +
labs(color = "Measure type", fill = "Measure type", x = "Phone price", y = "Measure value", title = "Break Down") +
scale_x_continuous(expand = c(0.01, 0)) +
theme_bw() +
theme(legend.position = "bottom") +
theme_drwhy()
ggsave("../plots/ibd_plot.png", plot = ibd_plot, height = 5, width = 7)
shap_pps <- shap_pps[[4]]
shap_ppsv <- shap_ppsv[[4]]
plot_data_pps <- data.frame(Measure = shap_pps, Price = phones$price[as.numeric(names(shap_pps))], `Measure type` = "PPS")
plot_data_ppsv <- data.frame(Measure = shap_ppsv, Price = phones$price[as.numeric(names(shap_ppsv))], `Measure type` = "PPSv")
plot_data <- rbind(plot_data_pps, plot_data_ppsv)
shap_plot <- ggplot(data = plot_data, aes(x = Price, y = Measure, color = Measure.type, fill = Measure.type)) +
geom_point() +
geom_smooth(alpha = 0.25, se = FALSE) +
labs(color = "Measure type", fill = "Measure type", x = "Phone price", y = "Measure value", title = "SHAP") +
scale_x_continuous(expand = c(0.01, 0)) +
theme_bw() +
theme(legend.position = "bottom") +
theme_drwhy()
ggsave("../plots/shap_plot.png", plot = shap_plot, height = 5, width = 7)
plot_data <- data.frame(Measure = lime_pps, Price = phones$price[as.numeric(names(lime_pps))], `Measure type` = "PPS")
lime_plot <- ggplot(data = plot_data, aes(x = Price, y = Measure, color = Measure.type, fill = Measure.type)) +
geom_point() +
geom_smooth(alpha = 0.25) +
labs(color = "Measure type", fill = "Measure type", x = "Phone price", y = "Measure value", title = "LIME") +
scale_x_continuous(expand = c(0.01, 0)) +
theme_bw() +
theme(legend.position = "bottom") +
theme_drwhy()
lime_plot <- ggplot(data = plot_data, aes(x = Price, y = Measure, color = Measure.type, fill = Measure.type)) +
geom_point() +
geom_smooth(alpha = 0.25, se = FALSE) +
labs(color = "Measure type", fill = "Measure type", x = "Phone price", y = "Measure value", title = "LIME") +
scale_x_continuous(expand = c(0.01, 0)) +
theme_bw() +
theme(legend.position = "bottom") +
theme_drwhy()
ggsave("../plots/lime_plot.png", plot = lime_plot, height = 5, width = 7)
plot_data <- rbind(
data.frame(Measure = ibd_pps, Price = phones$price[as.numeric(names(ibd_pps))], `Measure type` = "Break Down"),
data.frame(Measure = shap_pps, Price = phones$price[as.numeric(names(shap_pps))], `Measure type` = "SHAP"),
data.frame(Measure = lime_pps, Price = phones$price[as.numeric(names(lime_pps))], `Measure type` = "LIME")
)
comaprison_plot <- ggplot(data = plot_data, aes(x = Price, y = Measure, color = Measure.type, fill = Measure.type)) +
geom_point() +
geom_smooth(alpha = 0.25, se = FALSE) +
labs(color = "Measure type", fill = "Measure type", x = "Phone price", y = "Measure value") +
scale_x_continuous(expand = c(0.01, 0)) +
theme_bw() +
theme(legend.position = "bottom") +
theme_drwhy()
ggsave("../plots/comparison.png", plot = comaprison_plot, height = 5, width = 7)
phones <- read.csv("../data/phones/phones.csv", stringsAsFactors = TRUE)
phones$resolution_Mpx <- phones$height_px*phones$width_px/1000000
phones <- phones[,-c(9, 10)]
library(mlr)
set.seed(123)
task <- makeRegrTask("phones", phones[,-c(1)], "price")
lrn <- makeLearner("regr.gbm", par.vals = list(n.trees = 2672, interaction.depth = 2, n.minobsinnode=5, shrinkage=0.131))
model <- train(lrn, task)
rdesc <- makeResampleDesc("CV", iters = 5)
library(DALEXtra)
explainer <- explain_mlr(model, phones[,-c(1, 9)], phones$price)
mp <- model_performance(explainer)
mp$measures$rmse
explainer$label <- "'GBM model for Phones data"
d <- predict_parts(explainer, phones[252,])
p <- plot(d)
p +
scale_y_continuous(limits = c(1596, 3400)) +
labs(y = "Price")
p +
scale_y_continuous(limits = c(1596, 3400)) +
labs(y = "Price")
ggsave("../plots/ibd.png", height = 5, width = 8)
explainer$label <- "GBM model for Phones data"
d <- predict_parts(explainer, phones[252,])
p <- plot(d)
p +
scale_y_continuous(limits = c(1596, 3400)) +
labs(y = "Price")
ggsave("../plots/ibd.png", height = 5, width = 8)
explainer$label <- "GBM model for Phones data"
d <- predict_parts(explainer, phones[252,])
p <- plot(d)
p +
scale_y_continuous(limits = c(1596, 3400)) +
labs(y = "Price")
ggsave("../plots/ibd.png", height = 5, width = 8)
explainer$label <- "GBM model for Phones data"
d <- predict_parts(explainer, phones[252,], type = shap)
d <- predict_parts(explainer, phones[252,], type = "shap")
p <- plot(d)
p
p
ggsave("../plots/shap.png", height = 5, width = 8)
